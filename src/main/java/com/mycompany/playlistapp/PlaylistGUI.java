/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.playlistapp;

import java.util.ArrayList;
import javax.swing.DefaultListModel;

/**
 *
 * @author micle
 */
public class PlaylistGUI extends javax.swing.JFrame {
    
     SLList songs;
     SLList popSongs;
     SLList rockSongs;
     
     String songToDelete="";
     
    /**
     * Creates new form PlaylistGUI
     */
    public PlaylistGUI() {
        initComponents();
        
        this.songsCountTxt.setText("0 songs");
        this.popSongsTxt.setText("0 songs");
        this.rockSongsTxt.setText("0 songs");
        
        
        songs = new SLList();
        popSongs = new SLList();
        rockSongs = new SLList();
        
        this.moveToPopBtn.setVisible(false);
        this.moveToRockBtn.setVisible(false);
        this.deleteBtn.setVisible(false);
        
      //  this.rockRadio.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        songNameTxt = new javax.swing.JTextField();
        addSongBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        songsList = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        popSongsList = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        rockSongsList = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        searchTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        resultsList = new javax.swing.JList<>();
        deleteBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        moveToPopBtn = new javax.swing.JButton();
        moveToRockBtn = new javax.swing.JButton();
        songsCountTxt = new javax.swing.JLabel();
        popSongsTxt = new javax.swing.JLabel();
        rockSongsTxt = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Song Name:");

        songNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songNameTxtActionPerformed(evt);
            }
        });

        addSongBtn.setText("Add");
        addSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongBtnActionPerformed(evt);
            }
        });

        songsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        songsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                songsListKeyTyped(evt);
            }
        });
        songsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                songsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(songsList);

        jLabel4.setText("Songs");

        popSongsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        popSongsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                popSongsListKeyPressed(evt);
            }
        });
        popSongsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                popSongsListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(popSongsList);

        jLabel5.setText("Pop Songs");

        jLabel6.setText("Rock Songs");

        rockSongsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        rockSongsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rockSongsListKeyPressed(evt);
            }
        });
        rockSongsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                rockSongsListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(rockSongsList);

        jLabel8.setText("Search Song By Name:");

        jLabel9.setText("Search Results");

        resultsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(resultsList);

        deleteBtn.setBackground(new java.awt.Color(255, 51, 51));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        moveToPopBtn.setText("Move To Pop Songs");
        moveToPopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToPopBtnActionPerformed(evt);
            }
        });

        moveToRockBtn.setText("Move To Rock Songs");
        moveToRockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToRockBtnActionPerformed(evt);
            }
        });

        songsCountTxt.setText("jLabel2");

        popSongsTxt.setText("jLabel2");

        rockSongsTxt.setText("jLabel2");

        jLabel2.setText("w - move song up");

        jLabel10.setText("s - move song down");

        jLabel11.setText("Instructions:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchBtn)
                                    .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(songNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(146, 146, 146))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(addSongBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(songsCountTxt))
                                .addGap(134, 134, 134)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(popSongsTxt))
                                .addGap(76, 76, 76)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rockSongsTxt)
                                    .addComponent(jLabel6)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(deleteBtn)
                                .addGap(27, 27, 27)
                                .addComponent(moveToPopBtn)
                                .addGap(29, 29, 29)
                                .addComponent(moveToRockBtn)))))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(songNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addComponent(addSongBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel4)
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(songsCountTxt)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(popSongsTxt)
                                .addComponent(rockSongsTxt)))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteBtn)
                            .addComponent(moveToPopBtn)
                            .addComponent(moveToRockBtn))
                        .addGap(101, 101, 101)
                        .addComponent(jLabel7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(searchBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void songNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_songNameTxtActionPerformed

    
    
    private void addSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongBtnActionPerformed
        // TODO add your handling code here:
        String name = this.songNameTxt.getText();
        
        this.songs.add(name);
        
//         if(this.rockRadio.isSelected()){
//             this.rockSongs.add(name);
//         }
//         else{
//             this.popSongs.add(name);
//         }
         
         mapSongsToLists();
    }//GEN-LAST:event_addSongBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        
        ArrayList<String> results1 = this.songs.getSongsByName(this.searchTxt.getText());
        ArrayList<String> results2 = this.popSongs.getSongsByName(this.searchTxt.getText());
        ArrayList<String> results3 = this.rockSongs.getSongsByName(this.searchTxt.getText());
        
        DefaultListModel<String> model = new DefaultListModel<>();
        
        for(int i = 0;i < results1.size();i++){
            model.addElement(results1.get(i));
        }
        
        for(int i = 0;i < results2.size();i++){
            model.addElement(results2.get(i));
        }
        
        for(int i = 0;i < results3.size();i++){
            model.addElement(results3.get(i));
        }
        
        
        this.resultsList.setModel(model);
        
    }//GEN-LAST:event_searchBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        
        int index1 = this.songs.getIndexBySongName(this.songToDelete);
        int index2 = this.popSongs.getIndexBySongName(this.songToDelete);
        int index3 = this.rockSongs.getIndexBySongName(this.songToDelete);
        
        if(index1 != -1){
            this.songs.remove(index1);
            this.mapSongsToLists();
        }else if(index2 != -1){
            this.popSongs.remove(index2);
            this.mapSongsToLists();
        }else if(index3 != -1){
            this.rockSongs.remove(index3);
            this.mapSongsToLists();
        }
        
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void songsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_songsListValueChanged
        // TODO add your handling code here:
        this.songToDelete = this.songsList.getSelectedValue();
        
        this.moveToPopBtn.setVisible(true);
        this.moveToRockBtn.setVisible(true);
        this.deleteBtn.setVisible(true);
        
        System.out.println(this.songToDelete);  
    }//GEN-LAST:event_songsListValueChanged

    private void popSongsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_popSongsListValueChanged
        // TODO add your handling code here:
        this.songToDelete = this.popSongsList.getSelectedValue();
        
    }//GEN-LAST:event_popSongsListValueChanged

    private void rockSongsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_rockSongsListValueChanged
        // TODO add your handling code here:
        
        this.songToDelete = this.rockSongsList.getSelectedValue();
    }//GEN-LAST:event_rockSongsListValueChanged

    private void moveToPopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToPopBtnActionPerformed
        // TODO add your handling code here:
        int index = this.songs.getIndexBySongName(this.songToDelete);
        
        if(index == this.songs.size()){
            this.songs.remove(index);
            this.popSongs.add(this.songToDelete);
            this.mapSongsToLists();
        }
        
        
        
    }//GEN-LAST:event_moveToPopBtnActionPerformed

    private void moveToRockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToRockBtnActionPerformed
        // TODO add your handling code here:
        int index = this.songs.getIndexBySongName(this.songToDelete);
        
        if(index == this.songs.size()){
            this.songs.remove(index);
            this.rockSongs.add(this.songToDelete);
            this.mapSongsToLists();
        }
        
    }//GEN-LAST:event_moveToRockBtnActionPerformed

    private void songsListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_songsListKeyTyped
        // TODO add your handling code here:
        
       if(evt.getKeyChar() == 'w'){
           
           int index = this.songs.getIndexBySongName(this.songToDelete);
           
           if(index == 1) return;
           String aux = this.songs.get(index - 1).getElement();
           this.songs.remove(index - 1);
           this.songs.add(index-1,this.songToDelete);
           this.songs.remove(index);
           this.songs.add(index,aux);
           
           mapSongsToLists();
           this.songsList.setSelectedIndex(index-2);
       }
       else if(evt.getKeyChar() == 's'){
           int index = this.songs.getIndexBySongName(this.songToDelete);
           if(index == this.songs.size()) return;
           
           String aux = this.songs.get(index + 1).getElement();
           this.songs.remove(index + 1);
           this.songs.add(index + 1,this.songToDelete);
           this.songs.remove(index);
           this.songs.add(index,aux);
           
           mapSongsToLists();
           this.songsList.setSelectedIndex(index);
           
           
       }
       
       
    }//GEN-LAST:event_songsListKeyTyped

    private void popSongsListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_popSongsListKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyChar() == 'w'){
           
           int index = this.popSongs.getIndexBySongName(this.songToDelete);
           
           if(index == 1) return;
           String aux = this.popSongs.get(index - 1).getElement();
           this.popSongs.remove(index - 1);
           this.popSongs.add(index-1,this.songToDelete);
           this.popSongs.remove(index);
           this.popSongs.add(index,aux);
           
           mapSongsToLists();
           this.popSongsList.setSelectedIndex(index-2);
       }
       else if(evt.getKeyChar() == 's'){
           int index = this.popSongs.getIndexBySongName(this.songToDelete);
           
           if(index == this.popSongs.size()) return;
           
           String aux = this.popSongs.get(index + 1).getElement();
           this.popSongs.remove(index + 1);
           this.popSongs.add(index + 1,this.songToDelete);
           this.popSongs.remove(index);
           this.popSongs.add(index,aux);
           
           mapSongsToLists();
           this.popSongsList.setSelectedIndex(index);
           
           
       }
    }//GEN-LAST:event_popSongsListKeyPressed

    private void rockSongsListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rockSongsListKeyPressed
        // TODO add your handling code here:
        
         if(evt.getKeyChar() == 'w'){
           
           int index = this.rockSongs.getIndexBySongName(this.songToDelete);
           
           if(index == 1) return;
           String aux = this.rockSongs.get(index - 1).getElement();
           this.rockSongs.remove(index - 1);
           this.rockSongs.add(index-1,this.songToDelete);
           this.rockSongs.remove(index);
           this.rockSongs.add(index,aux);
           
           mapSongsToLists();
           this.rockSongsList.setSelectedIndex(index-2);
       }
       else if(evt.getKeyChar() == 's'){
           int index = this.rockSongs.getIndexBySongName(this.songToDelete);
           
           if(index == this.rockSongs.size()) return;
           
           String aux = this.rockSongs.get(index + 1).getElement();
           this.rockSongs.remove(index + 1);
           this.rockSongs.add(index + 1,this.songToDelete);
           this.rockSongs.remove(index);
           this.rockSongs.add(index,aux);
           
           mapSongsToLists();
           this.rockSongsList.setSelectedIndex(index);
           
           
       }
        
    }//GEN-LAST:event_rockSongsListKeyPressed

    private void mapSongsToLists(){
        
        DefaultListModel<String> songsModel = new DefaultListModel<>();
        DefaultListModel<String> rockModel = new DefaultListModel<>();
        DefaultListModel<String> popModel = new DefaultListModel<>();
        
        this.songsCountTxt.setText(songs.size()+ " songs");
        this.popSongsTxt.setText(popSongs.size()+ " songs");
        this.rockSongsTxt.setText(rockSongs.size()+ " songs");
        
        
        for(int i = 1;i <= songs.size();i++){
            
            System.out.println(songs.get(i).getElement());
            songsModel.addElement(songs.get(i).getElement());
            
        }
        
        for(int i = 1;i <= rockSongs.size();i++){
            rockModel.addElement(rockSongs.get(i).getElement());
        }
        
        for(int i = 1;i <= popSongs.size();i++){
            popModel.addElement(popSongs.get(i).getElement());
        }
        
       
        this.rockSongsList.setModel(rockModel);
        this.popSongsList.setModel(popModel);
        this.songsList.setModel(songsModel);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlaylistGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlaylistGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlaylistGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlaylistGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlaylistGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSongBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton moveToPopBtn;
    private javax.swing.JButton moveToRockBtn;
    private javax.swing.JList<String> popSongsList;
    private javax.swing.JLabel popSongsTxt;
    private javax.swing.JList<String> resultsList;
    private javax.swing.JList<String> rockSongsList;
    private javax.swing.JLabel rockSongsTxt;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTxt;
    private javax.swing.JTextField songNameTxt;
    private javax.swing.JLabel songsCountTxt;
    private javax.swing.JList<String> songsList;
    // End of variables declaration//GEN-END:variables
}
